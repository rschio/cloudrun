// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimesClient is the client API for Times service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimesClient interface {
	GetTimes(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error)
}

type timesClient struct {
	cc grpc.ClientConnInterface
}

func NewTimesClient(cc grpc.ClientConnInterface) TimesClient {
	return &timesClient{cc}
}

func (c *timesClient) GetTimes(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/proto.Times/GetTimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimesServer is the server API for Times service.
// All implementations must embed UnimplementedTimesServer
// for forward compatibility
type TimesServer interface {
	GetTimes(context.Context, *Output) (*Output, error)
	mustEmbedUnimplementedTimesServer()
}

// UnimplementedTimesServer must be embedded to have forward compatible implementations.
type UnimplementedTimesServer struct {
}

func (UnimplementedTimesServer) GetTimes(context.Context, *Output) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimes not implemented")
}
func (UnimplementedTimesServer) mustEmbedUnimplementedTimesServer() {}

// UnsafeTimesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimesServer will
// result in compilation errors.
type UnsafeTimesServer interface {
	mustEmbedUnimplementedTimesServer()
}

func RegisterTimesServer(s grpc.ServiceRegistrar, srv TimesServer) {
	s.RegisterService(&Times_ServiceDesc, srv)
}

func _Times_GetTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Output)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesServer).GetTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Times/GetTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesServer).GetTimes(ctx, req.(*Output))
	}
	return interceptor(ctx, in, info, handler)
}

// Times_ServiceDesc is the grpc.ServiceDesc for Times service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Times_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Times",
	HandlerType: (*TimesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimes",
			Handler:    _Times_GetTimes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
